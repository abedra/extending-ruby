#+TITLE:     Extending Ruby With C
#+AUTHOR:    Aaron Bedra
#+EMAIL:     aaron@aaronbedra.com
#+LANGUAGE:  en

* Starting Structure
  - We will start with the basic structure of a gem. It consists of a
    =.gemspec= file that containts the instructions for packaging and
    building a gem.
#+begin_src sh
  touch xpanther.gemspec
  mkdir lib
  touch lib/xpanther.rb
#+end_src
** Initial Code
   - Next, we need to put some basic code in place to make the gem function:
#+begin_src ruby :mkdirp yes :tangle lib/xpanther.rb
  require 'rexml/document'
  
  class XPanther
    def self.search_pure(filename, xpath)
      document = REXML::Document.new(File.read(filename))
      REXML::XPath.match(document.root, xpath)
    end
  end
#+end_src
** Initial Gemspec
   - Now we need to tell Rubygems how to build and package this gem:
#+begin_src ruby :tangle xpanther.gemspec
  Gem::Specification.new do |s|
    s.name        = 'xpanther'
    s.version     = '0.0.0'
    s.date        = '2012-02-21'
    s.summary     = "Made with real bits of panther"
    s.description = "60% of the time it works all the time"
    s.authors     = ["Aaron Bedra"]
    s.email       = 'aaron@aaronbedra.com'
    s.files       = ["lib/xpanther.rb"]
    s.homepage    = "http://example.com"
  end
#+end_src
** Building and testing the gem
   - First, build and install the gem:
#+begin_src sh
  $ gem build xpanther.gemspec
  $ gem install xpanther-0.0.0.gem
#+end_src
   - Next, start an irb session using the new gem:
#+begin_src sh
  $ irb -rubygems -rxpanther
#+end_src
#+begin_src sh
  >> XPanther.search_pure("examples/twitter.xml", "/statuses/status/text/text()").count
  => 20
  >> XPanther.search_pure("examples/twitter.xml", "/statuses/status/text/text()").first
  => "Hoje sai com a @is_nanny"
#+end_src
* Testing
** Adding the first test
   - We should add at least one test to get our structure in place and
     make sure things behave like we expect them to:
#+begin_src ruby :mkdirp yes :tangle test/test_xpanther.rb
  require 'test/unit'
  require 'xpanther'
  
  class XPantherTest < Test::Unit::TestCase
    def test_search_pure
      results = XPanther.search_pure("examples/twitter.xml", "/statuses/status/text/text()")
      assert_equal(20, results.count)
      assert_equal("Hoje sai com a @is_nanny", results.first.to_s)
    end
  end
#+end_src
** Adding a Rake task
   - It's always easier to control things via Rake
#+begin_src ruby :tangle Rakefile
  require 'rake/testtask'
  
  Rake::TestTask.new do |t|
    t.libs << "test"
  end
  
  task :default => :test
#+end_src
** Running our tests
   - With the default task wired up we can just run =rake=. Here's what you should see
#+begin_src sh
  Loaded suite /Users/abedra/.rvm/gems/ree-1.8.7-2011.12/gems/rake-0.9.2.2/lib/rake/rake_test_loader
  Started
  .
  Finished in 0.090969 seconds.
  
  1 tests, 2 assertions, 0 failures, 0 errors
#+end_src
* How fast is it?
** Timing a run
   - We can now use our gem to see how fast it takes to ask some
     questions about the sample xml document. Make sure to install the
     latest version of the gem.
#+begin_src sh
  $ gem build xpanther.gemspec
  $ gem install xpanther-0.0.0.gem
#+end_src
#+begin_src ruby :mkdirp yes :tangle examples/pure.rb
  require 'rubygems'
  require 'xpanther'
  
  results = XPanther.search_pure("examples/twitter.xml", "/statuses/status/text/text()")
  puts results.count
  puts results[1]
#+end_src
   - Now we can time run of this to see how we're doing on performance
#+begin_src sh
  $ time ruby examples/pure.rb
  20
  gelitik cewe paling binal dan buset ,,
  ruby examples/pure.rb  0.15s user 0.01s system 98% cpu 0.167 total
#+end_src sh
** Should we stop here?
   - This actually seems pretty fast. Isn't this fast enough?
* Experiment: XPath search in C with libxml
  - libxml is a very widely used library in the XML parsing game. If
    you are in C and need to get the job done, libxml is your best
    friend
** The test
#+begin_src c :tangle examples/xml.c
  #include <stdlib.h>
  #include <stdio.h>
  #include <libxml/tree.h>
  #include <libxml/parser.h>
  #include <libxml/xpath.h>
  #include <libxml/xpathInternals.h>
  
  int search(const char* filename, const xmlChar* xpathExpr) {
    xmlDocPtr doc;
    xmlXPathContextPtr xpathCtx;
    xmlXPathObjectPtr xpathObj;
    xmlNodePtr cur;
    xmlNodeSetPtr nodes;
    int size;
    int i;
  
    doc = xmlParseFile(filename);
    xpathCtx = xmlXPathNewContext(doc);
    xpathObj = xmlXPathEvalExpression(xpathExpr, xpathCtx);
  
    nodes = xpathObj->nodesetval;
    size = (nodes) ? nodes->nodeNr : 0;
  
    if (size == 1) {
      fprintf(stderr, "%s\n", xmlNodeGetContent(nodes->nodeTab[0]));
    } else {
      for (i = 0; i < size; ++i) {
        cur = nodes->nodeTab[i];
        fprintf(stderr, "%s\n", xmlNodeGetContent(cur));
      }
    }
  
    xmlXPathFreeObject(xpathObj);
    xmlXPathFreeContext(xpathCtx);
    xmlFreeDoc(doc);
  
    return(0);
  }
  
  int main(int argc, char **argv) {
    xmlInitParser();
    search(argv[1], argv[2]);
    xmlCleanupParser();
    xmlMemoryDump();
    return 0;
  }
#+end_src
** Compiling
   - You can compile the example using the following command:
#+begin_src sh
  gcc xml.c -o xml `xml2-config --cflags` `xml2-config --libs`
#+end_src
** How fast is the C version?
#+begin_src sh
  time ./xml twitter.xml "/statuses/status/text"
  
  Hoje sai com a @is_nanny
  gelitik cewe paling binal dan buset ,,
  めっさひまやで！
  
  ....
  
  /xml twitter.xml "/statuses/status/text"  0.00s user 0.00s system 40% cpu 0.0010 total
#+end_src
   - Wow! I'll bet without too much modification we can turn this into a Ruby C extension
* Adding the extension infrastructure
** Directory structure
   - When adding a C extension, the common folder structure is
     =ext/gemname/*.c=. We will create the ext/xpanther directory and
     create a file called extconf.rb in the xpanther folder.
** extconf.rb
   - =extconf.rb= will generate a =Makefile= for the project. It is
     also what you will add to the gemspec to tell it how to build
     your extension.
#+begin_src ruby :mkdirp yes :tangle ext/xpanther/extconf.rb
  require 'mkmf'
  create_makefile('xpanther/xpanther')
#+end_src
** A simple example
   - Now we just need to add a short example to test our structure and wiring.
#+begin_src c :mkdirp yes :tangle ext/xpanther/xpanther.c
  #include <ruby.h>
  
  static VALUE hello(VALUE self) {
    return rb_str_new2("Hello from C");
  }
  
  void Init_xpanther(void) {
    VALUE klass = rb_define_class("XPanther", rb_cObject);
    rb_define_singleton_method(klass, "hello", hello, 0);
  }
#+end_src
   - We also need to have our gem load the extension
#+begin_src ruby
  require 'xpanther/xpanther'
  require 'rexml/document'
  class XPanther
  
  ....
#+end_src ruby
** Updating the gemspec
   - In order to have the extension built when our gem is installed, we have to tell the gemspec about it.
#+begin_src ruby
  Gem::Specification.new do |s|
    # ... (other stuff) ...
  
    s.files = Dir.glob('lib/**/*.rb') + Dir.glob('ext/**/*.c')
    s.extensions = ['ext/xpanther/extconf.rb']
  
    # ... (other stuff) ...
  end
#+end_src
** Trying out the extension
   - Let's install our gem and give the new method a try. Since we
     have made significant changes we should bump the version number
     as well.
#+begin_src sh
  $ gem install xpanther-0.0.1.gem 
  Building native extensions.  This could take a while...
  Successfully installed xpanther-0.0.1
  1 gem installed
  Installing ri documentation for xpanther-0.0.1...
  Installing RDoc documentation for xpanther-0.0.1...
#+end_src
   - Notice the new message about building the native extension. If
     you don't see that, your extension is not being installed.
   - Fire up and irb session and run the new method:
#+begin_src sh
  $ irb -rubygems -rxpanther
  >> XPanther.hello
  => "Hello from C"
#+end_src
** Adding a test
   - We are going to add a test for our new extension. You might be
     wondering why, but it will present an interesting challenge for
     us to solve when we try to run the tests.
#+begin_src ruby
  def test_extension
    assert_equal("Hello from C", XPanther.hello)
  end  
#+end_src
** Updating the Rakefile to autocompile for tests
   - When we try to run =rake= we are now presented with an error.
#+begin_src sh
  $ rake
  ./lib/xpanther.rb:1:in `require': no such file to load -- xpanther/xpanther (LoadError)
  from ./lib/xpanther.rb:1
  
  ....
#+end_src
   - This error is caused because our extension is not compiled and
     available for our tests. Luckily, there's an easy solution to
     this.
   - Before we open our =Rakefile=, we should do a quick test on our system in irb
#+begin_src sh
  $ irb -rrbconfig
  >> RbConfig::CONFIG['DLEXT']
  => "bundle"
#+end_src
   - This let's us know that the compiled extension will have the file
     extension of =.bundle=. If you are on Linux you would see =.so=
     instead of .bundle
   - Let's add some code into our =Rakefile= to automatically compile our extension when we run =rake=
#+begin_src ruby :tangle no
  require 'rake/testtask'
  require 'rake/clean'
  require 'rbconfig'
  
  EXT = RbConfig::CONFIG['DLEXT']
  
  file "lib/xpanther/xpanther.#{EXT}" =>
    Dir.glob("ext/xpanther/*{.rb,.c}") do
    Dir.chdir("ext/xpanther") do
      ruby "extconf.rb"
      sh "make"
    end
    cp "ext/xpanther/xpanther.#{EXT}", "lib/xpanther"
  end
  
  task :test => "lib/xpanther/xpanther.#{EXT}"
  
  CLEAN.include('ext/**/*{.o,.log,.#{EXT}}')
  CLEAN.include('ext/**/Makefile')
  CLOBBER.include('lib/**/*.#{EXT}')
  
  Rake::TestTask.new do |t|
    t.libs << 'test'
  end
  
  desc "Run tests"
  task :default => :test
#+end_src
* Moving the example into a real Ruby extension
** How should the API look?
** Object creation
*** A note about GC and memory management
** When the basic constructor just won't do
** Putting it all together
* The results!
* Conclusions/Questions
